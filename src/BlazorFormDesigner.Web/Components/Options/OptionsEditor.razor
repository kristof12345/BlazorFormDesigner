@if (Corrected)
{
    @if (Type == QuestionType.SingleChoice.GetAttributeValue() || Type == QuestionType.MultipleChoice.GetAttributeValue())
    {
        <MatBody1 Class="subtitle">Options</MatBody1>
        @foreach (var option in Options)
        {
            <CorrectedOptionView Option=@option OnDelete=@DeleteOption />
        }
        <MatButton OnClick=@AddOption Type="button" Style="height: 36px; margin-top: 10px;"Outlined="true">Add option</MatButton>
    }
    @if (Type == QuestionType.Text.GetAttributeValue() || Type == QuestionType.Numeric.GetAttributeValue())
    {
        <MatBody1 Class="subtitle">Options</MatBody1>
        <OptionView Option=@Options.FirstOrDefault() OnDelete=@DeleteOption />
    }
}
else
{
    @if (Type == QuestionType.SingleChoice.GetAttributeValue() || Type == QuestionType.MultipleChoice.GetAttributeValue())
    {
        <MatBody1 Class="subtitle">Options</MatBody1>
        @foreach (var option in Options)
        {
            <OptionView Option=@option OnDelete=@DeleteOption />
        }
        <MatButton OnClick=@AddOption Type="button" Style="height: 36px; margin-top: 10px;" Outlined="true">Add option</MatButton>
    }
}

@code {

    [Parameter]
    public List<Option> Options { get; set; }

    [Parameter]
    public string Type { get; set; }

    [Parameter]
    public bool Corrected { get; set; }

    [Parameter]
    public EventCallback<Option> OnAdd { get; set; }

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    private async Task AddOption()
    {
        var option = new Option { Content = " " };
        await OnAdd.InvokeAsync(option);
    }

    private async Task DeleteOption(string content)
    {
        await OnDelete.InvokeAsync(content);
    }
}
