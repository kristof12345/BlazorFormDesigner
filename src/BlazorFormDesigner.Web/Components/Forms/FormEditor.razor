<Paper Margin=@(new Border { Top="30px" }) Padding=@(new Border("120px", "20px" ))>
    <MatH4 Class="title" Style="padding-bottom: 20px;">Edit a Form</MatH4>
    <div class="wide">
        <EditForm OnValidSubmit=@Submit OnInvalidSubmit=@InvalidSubmit EditContext=@EditContext>
            <DataAnnotationsValidator />
            <p>
                <MatTextField @bind-Value=@Model.Title Label="Title" Outlined="true" />
                <ValidationMessage For=@(() => Model.Title) />
            </p>
            <p>
                <MatTextField @bind-Value=@Model.Description Label="Topic" TextArea="true" Outlined="true" />
                <ValidationMessage For=@(() => Model.Description) />
            </p>
            <MatBody1 Class="subtitle">Questions</MatBody1>
            @foreach (var question in Model.Questions)
            {
                <AddedQuestionView Question=@question OnEdit=@EditQuestion OnDelete=@DeleteQuestion />
            }
            @if (CurrentQuestion != null)
            {
                <QuestionEditor Model=@CurrentQuestion OnFinish=@SaveQuestion /> }
            else
            {
                <MatButton OnClick=@AddQuestion Type="button" Style=@($"color: {Colors.Warning}; border-color: {Colors.Warning} !important; margin-top: 10px; margin-bottom: 10px;") Outlined="true">Create question</MatButton>
            }
            @if (Error != null)
            {
                <p class="validation-message" style="width: 100%; margin-bottom: 10px;">@Error </p>
            }
            <Horizontal>
                <MatButton Link=@("/myforms") Type="button" Raised="true" Style="margin-top: 10px;">Cancel</MatButton>
                <MatButton Type="submit" Disabled=@(CurrentQuestion != null) Raised="true" Style="margin-top: 10px;">Save</MatButton>
            </Horizontal>
        </EditForm>
    </div>
</Paper>

@code {

    [Inject]
    private FormService FormService { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Parameter]
    public Form Form { get; set; }

    private EditContext EditContext { get; set; }

    private FormRequest Model { get; set; }

    private QuestionRequest CurrentQuestion { get; set; }

    private string Error { get; set; }

    protected override void OnInitialized()
    {
        Model = Form.ToRequest();
        EditContext = new EditContext(Model);
    }

    protected override void OnParametersSet()
    {
        Model = Form.ToRequest();
        EditContext = new EditContext(Model);
        CurrentQuestion = null;
    }

    private void AddQuestion()
    {
        CurrentQuestion = new QuestionRequest { Options = new List<Option>() };
    }

    private void SaveQuestion(QuestionRequest question)
    {
        Model.Questions.Add(question);
        CurrentQuestion = null;
        Error = null;
    }

    private void DeleteQuestion(QuestionRequest question)
    {
        Model.Questions.Remove(question);
    }

    private void EditQuestion(QuestionRequest question)
    {
        Model.Questions.Remove(question);
        CurrentQuestion = question;
        Error = null;
    }

    private async Task Submit()
    {
        await FormService.Update(Form.Id, Model);
        NavigationManager.NavigateTo("myforms");
    }

    private void InvalidSubmit()
    {
        if (Model.Questions.Count == 0)
        {
            Error = "Add at least 1 question!";
        }
    }
}
