<div class="framed">
    <EditForm OnValidSubmit=@Submit OnInvalidSubmit=@InvalidSubmit EditContext=@EditContext>
        <DataAnnotationsValidator />
        <p>
            <MatTextField @bind-Value=@Model.Title Label="Title" Outlined="true" />
            <ValidationMessage For=@(() => Model.Title) />
        </p>
        <p>
            <MatTextField @bind-Value=@Model.Description Label="Description" TextArea="true" Outlined="true" />
            <ValidationMessage For=@(() => Model.Description) />
        </p>
        <p>
            <MatSelectItem Value=@Model.Type ValueChanged=@((string value)=> SetType(value)) ValueExpression=@(()=> Model.Type) Items=@(EnumExtensions.GetAttributeList<QuestionType>()) Label="Question type" Outlined="true" />
            <ValidationMessage For=@(() => Model.Type) />
        </p>
        <MatCheckbox @bind-Value=@Model.IsCorrected Style="margin-left: -10px;">This question is corrected.</MatCheckbox>
        <OptionsEditor Options=@Model.Options Type=@Model.Type Corrected=@Model.IsCorrected OnAdd=@AddOption OnDelete=@DeleteOption />
        @if (Error != null)
        {
            <p class="validation-message" style="width: 100%; margin-bottom: 10px; margin-top: 10px;">@Error </p>
        }
        <MatButton Type="submit" Style="width: 100%; margin-top: 10px; margin-bottom: 10px;" Raised="true">Add question</MatButton>
    </EditForm>
</div>

@code {

    [Parameter]
    public QuestionRequest Model { get; set; }

    [Parameter]
    public EventCallback<QuestionRequest> OnFinish { get; set; }

    private EditContext EditContext { get; set; }

    private string Error { get; set; }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Model);
    }

    protected override void OnParametersSet()
    {
        EditContext = new EditContext(Model);
    }

    private void AddOption(Option option)
    {
        Model.Options.Add(option);
        Error = null;
    }

    private void DeleteOption(string option)
    {
        Model.Options.RemoveAll(o => o.Content == option);
    }

    private async Task Submit()
    {
        var error = ValidateOptions();
        if (error == null)
        {
            var options = new List<Option>();
            foreach (var option in Model.Options)
            {
                if (!string.IsNullOrWhiteSpace(option.Content))
                {
                    if (Model.Type == QuestionType.Text.GetAttributeValue() || Model.Type == QuestionType.Numeric.GetAttributeValue()) option.IsCorrect = true;
                    options.Add(option);
                }
            }
            Model.Options = options;
            await OnFinish.InvokeAsync(Model);
        }
        Error = error;
    }

    private string ValidateOptions()
    {
        if ((Model.Type == QuestionType.MultipleChoice.GetAttributeValue() || Model.Type == QuestionType.SingleChoice.GetAttributeValue()) && Model.Options.Count < 2)
        {
            return "Minimum 2 options required for each question.";
        }

        if (!Model.IsCorrected) return null;

        if (Model.Type == QuestionType.Text.GetAttributeValue() || Model.Type == QuestionType.Numeric.GetAttributeValue())
        {
            if (Model.Options.Count() != 1) return "This question type requires one correct option.";
        }

        if (Model.Type == QuestionType.SingleChoice.GetAttributeValue())
        {
            if (Model.Options.Where(o => o.IsCorrect).Count() != 1) return "This question type requires one correct option.";
        }

        if (Model.Type == QuestionType.MultipleChoice.GetAttributeValue())
        {
            if (Model.Options.Where(o => o.IsCorrect).Count() < 2) return "This question type requires at least two correct option.";
        }

        return null;
    }

    private void InvalidSubmit()
    {
        if ((Model.Type == QuestionType.MultipleChoice.GetAttributeValue() || Model.Type == QuestionType.SingleChoice.GetAttributeValue()) && Model.Options.Count < 2)
        {
            Error = "Minimum 2 options required for each question.";
        }
    }

    private void SetType(string value)
    {
        Model.Type = value;

        if (Model.Options.Count == 0 && (Model.Type == QuestionType.MultipleChoice.GetAttributeValue() || Model.Type == QuestionType.SingleChoice.GetAttributeValue()))
        {
            Model.Options.Add(new Option());
            Model.Options.Add(new Option());
            Model.Options.Add(new Option());
        }

        if (Model.Type == QuestionType.Text.GetAttributeValue() || Model.Type == QuestionType.Numeric.GetAttributeValue())
        {
            Model.Options.Clear();
            Model.Options.Add(new Option());
        }

        EditContext.NotifyValidationStateChanged();
    }
    }